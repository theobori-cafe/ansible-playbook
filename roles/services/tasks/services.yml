- name: Check if the services directory exists
  ansible.builtin.stat:
    path: /usr/local/services
  register: services_dir
  become: yes

- name: Ansible create the services directory if not exists
  ansible.builtin.file:
    path: /usr/local/services
    state: directory
    mode: 0755
    recurse: yes
  when: services_dir.stat.exists == false
  become: yes

- name: Copy the docker compose configuration files
  block:
    - ansible.builtin.file: 
        path: "/usr/local/services/{{ service_name }}"
        state: directory
      loop:
        - etherpad
        - joplin
      loop_control:
        loop_var: service_name
  
    - ansible.builtin.template:
        src: "{{ service_name }}/docker-compose.yml.j2"
        dest: "/usr/local/services/{{ service_name }}/docker-compose.yml"
      loop:
        - etherpad
        - joplin
      loop_control:
        loop_var: service_name

    - ansible.builtin.copy:
        src: "{{ service_name }}"
        dest: "/usr/local/services/"
      loop:
        - proxitok
        - searxng
        - uptime-kuma
      loop_control:
        loop_var: service_name
  become: yes

- name: Install services
  block:
  - ansible.builtin.template:
      src: proxitok.service.j2
      dest: /etc/systemd/system/proxitok.service
  
  - ansible.builtin.copy:
      dest: /etc/systemd/system/theoboricafe.service
      content: |
        [Unit]
        Description=theobori.cafe website service
        Requires=docker.service
        After=docker.service

        [Service]
        Restart=on-failure

        ExecStart=docker run \
          -p 127.0.0.1:3000:3000 \
          --rm \
          --name theoboricafe \
          b0thr34l/theoboricafe

        ExecStop=docker kill theoboricafe

        [Install]
        WantedBy=multi-user.target

  - ansible.builtin.copy:
      dest: "/etc/systemd/system/{{ service_name }}.service"
      content: |
        [Unit]
        Description={{ service_name }} service
        Requires=docker.service
        After=docker.service

        [Service]
        Restart=on-failure

        WorkingDirectory=/usr/local/services/{{ service_name }}
  
        ExecStart=docker compose up
        ExecStop=docker compose down --remove-orphans
  
        [Install]
        WantedBy=multi-user.target
    loop:
      - etherpad
      - uptime-kuma
      - searxng
      - joplin
    loop_control:
      loop_var: service_name
  notify:
    - Reload systemctl
  become: yes