- name: Install NGINX packages
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop:
    - nginx
    - libnginx-mod-stream

- name: Create NGINX mandatory directories
  block:
    - ansible.builtin.stat:
        path: /etc/nginx/sites-available/
      register: dir_exists
    
    - ansible.builtin.file:
        path: /etc/nginx/sites-available/
        state: directory
        mode: 0755
        recurse: yes
      when: dir_exists.stat.exists == false
    
    - ansible.builtin.stat:
        path: /etc/nginx/sites-enabled/
      register: dir_exists
    
    - ansible.builtin.file:
        path: /etc/nginx/sites-enabled/
        state: directory
        mode: 0755
        recurse: yes
      when: dir_exists.stat.exists == false

- name: Install the global NGINX configuration
  ansible.builtin.copy:
    src: nginx.conf
    dest: /etc/nginx/nginx.conf

- name: Install services NGINX configuration files
  ansible.builtin.copy:
    dest: "/etc/nginx/sites-available/{{ item.server_name }}"
    content: |
      server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name  {{ 'www.' + fqdn if item.server_name == fqdn else "" }} {{ item.server_name }};

        ssl_certificate /etc/letsencrypt/live/{{ item.server_name }}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/{{ item.server_name }}/privkey.pem;
        ssl_session_timeout 1d;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;
        ssl_trusted_certificate /etc/letsencrypt/live/{{ fqdn }}/fullchain.pem;

        add_header Strict-Transport-Security "max-age=63072000" always;
        add_header Content-Security-Policy "font-src 'self'; frame-ancestors 'self'; base-uri 'self'; form-action 'self'; object-src 'self'";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Frame-Options "DENY";
        add_header X-Content-Type-Options "nosniff";
        add_header Referrer-Policy "no-referrer";
        add_header Permissions-Policy "microphone=(), geolocation=()";

        location / {
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-NginX-Proxy true;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
          proxy_set_header Host $host;
          proxy_set_header Accept-Encoding "";
          
          proxy_pass http://localhost:{{ item.service_port }}/;
    
          proxy_ssl_session_reuse off;
          proxy_http_version 1.1;
          proxy_cache_bypass $http_upgrade;
          proxy_redirect off;
        }

        resolver 1.1.1.1;
      }
  with_items:
    - { server_name: "etherpad.{{ fqdn }}", service_port: "9001" }
    - { server_name: "search.{{ fqdn }}", service_port: "8080" }
    - { server_name: "cringe.{{ fqdn }}", service_port: "8081" }
    - { server_name: "mail.{{ fqdn }}", service_port: "8181" }
    - { server_name: "status.{{ fqdn }}", service_port: "3001" }
    - { server_name: "cloud.{{ fqdn }}", service_port: "8000" }
    - { server_name: "{{ fqdn }}", service_port: "3000" }

- name: Install the default NGINX configuration file
  ansible.builtin.copy:
    dest: "/etc/nginx/sites-available/default"
    content: |
      server {
        listen 80;
        listen [::]:80;

        return 301 https://$host$request_uri;
      }

- name: Create symlinks
  file:
    src: "/etc/nginx/sites-available/{{ service_name }}"
    dest: "/etc/nginx/sites-enabled/{{ service_name }}"
    state: link
    force: yes
    follow: false
  loop:
    - etherpad.{{ fqdn }}
    - search.{{ fqdn }}
    - cringe.{{ fqdn }}
    - status.{{ fqdn }}
    - mail.{{ fqdn }}
    - cloud.{{ fqdn }}
    - "{{ fqdn }}"
    - default
  loop_control:
    loop_var: service_name

- name: Restart service NGINX
  ansible.builtin.service:
    name: nginx
    state: restarted
    enabled: yes
